0.Use .gitignore
1.Make a new project folder
2.Change Directory to this new folder
3.Inside the project folder, create a new file called app.js, index.html, index.js
4.Set up a new NPM package, npm init
5.Using NPM install the express, ejs modules, mongoose etc
6.Require express in your server.js
7.Setup express
8.Create a root route get method with app.get()
9.Spin up our server on port 3000 with app.listen
10.Inclue jQuery link (google) and index.js in index.html
11.Run server with nodemon


React:
0. Create a project folder and run: npx create-react-app


Express setup with EJS, dotenv, Mongoose + encryption, bcrypt:
1.Server.js add this:
    require("dotenv").config();
    const express = require("express");
    const ejs = require("ejs");
    const app = express();
    const mongoose = require("mongoose");
    const encrypt = require("mongoose-encryption");
    const bcrypt = require("bcrypt");
    const saltRounds = 10;
    

    app.set("view engine", "ejs");
    app.use(express.json());
    app.use(express.urlencoded({ extended: true }));
    app.use(express.static("public"));

    const SomeSchema = new mongoose.Schema({
        field1: String,
        field2: String,
    });
    SomeSchema.plugin(encrypt, { secret: process.env.NAME_OF_OPTION_DOTENV_FILE, encryptedFields: ["what we want to encrypt here"] });

    const SomeModel = mongoose.model("SomeName", SomeSchema);

    async function exampleFunction(value1) {
        if (mongoose.connection.readyState != 1) {
            await mongoose.connect("mongodb://localhost:27017/userDB");
        }
        bcrypt.hash(value1, saltRounds).then((hash) => {
            value1 = hash;
            //to check password use:
            //bcrypt.compare(enteredPassword, savedInDBPassword).then((result) => {
            //  result will be True if the 2 passwords are the same
            //})
        })
        let someExample = new SomeModel({ field1: value1, field2: value2 });
        let result = await someExample
            .save()
            .then(() => {
                return "True";
            })
            .catch((err) => {
                console.log("Something went wrong: ", err.message);
                return err.message;
            });
        return result;
    }
    
    function main(){
        app.route("/)
        .get((req, res) => {
        res.render("index");
        })
        .post((req, res) => {
            //saveResult is the result returned in the function
            let value1 = "Some text"
            exampleFunction(value1).then((saveResult) => {
                if (saveResult != "True") {
                res.send("Failed to register: ", saveResult);
                } else {
                res.redirect("/");
                }
            });
        });

        app.listen(3000);
    }

    if (require.main === module) {
    mongoose.connect("mongodb://localhost:27017/userDB");
    main();
    }



Passport:
    const passport = require("passport");
    const passportLocalMongoose = require("passport-local-mongoose");

    app.use(
    session({
        secret: process.env.SESSION_SECRET,
        resave: false,
        saveUninitialized: false,
        cookie: { secure: true },
    })
    );
    app.use(passport.initialize());
    app.use(passport.session());
  //Create mongoose schema before this
    UserSchema.plugin(passportLocalMongoose);
  //create the model before this
    passport.use(UserModel.createStrategy());
    passport.serializeUser(UserModel.serializeUser());
    passport.deserializeUser(UserModel.deserializeUser());

  //register
    async function addToDB(email, password) {
        if (mongoose.connection.readyState != 1) {
            await mongoose.connect("mongodb://localhost:27017/userDB");
        }
        let result = await UserModel.register(new UserModel({ username: email }), password)
            .then(() => {
            return "True";
            })
            .catch((err) => {
            return err;
            });
        return result;
        }  
    
  //Login
        app.post(passport.authenticate("local", { failureRedirect: "/login" }), function (req, res) {
            res.render("secrets");
        });

Google OAuth2 - needs Passport too, check the Secrets project for a working example:
        const GoogleStrategy = require("passport-google-oauth20").Strategy;
        const findOrCreate = require("mongoose-findorcreate");
        UserSchema.plugin(findOrCreate);
        passport.serializeUser(function (user, done) {
            done(null, user.id);
            });
            passport.deserializeUser(function (user, done) {
            done(null, user);
            });
        passport.use(
            new GoogleStrategy(
                {
                clientID: process.env.GOOGLE_CLIENT_ID,
                clientSecret: process.env.GOOGLE_CLIENT_SECRET,
                callbackURL: "http://localhost:3000/auth/google/callback",
                },
                function (accessToken, refreshToken, profile, cb) {
                UserModel.findOrCreate({ email: profile.emails[0].value, googleId: profile.id }, function (err, user) {
                    return cb(err, user);
                });
                }
            )
        );
        app.route("/auth/google").get(passport.authenticate("google", { scope: ["profile", "email"] }));
        app
            .route("/auth/google/callback")
            .get(passport.authenticate("google", { failureRedirect: "/login" }), function (req, res) {
            res.redirect("/secrets");
        });






HTML:
    <!DOCTYPE html>
    <html>
        <head>
            <meta charset="utf-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge">
            <title></title>
            <meta name="description" content="">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <link rel="stylesheet" href="">
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" />
            <link rel="stylesheet" href="/css/styles.css" />
            <script
            src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa"
            crossorigin="anonymous"
            defer
            ></script>
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js" defer></script>
        </head>
        <body>
        </body>
    </html>

